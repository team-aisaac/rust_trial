syntax = "proto3";

package aisaacpb;

message Position {
  int32 x = 1;
  int32 y = 2;
  int32 theta = 3;
}

message Velocity {
  int32 vx = 1;
  int32 vy = 2;
  int32 omega = 3;
}

message Acceleration {
  int32 ax = 1;
  int32 ay = 2;
}

message Obstacle {
  int32 x = 1;
  int32 y = 2;
  int32 vx = 3;
  int32 vy = 4;
}

message Kick {
  enum KickType {
    None = 0;
    Force = 1;
    Sensor = 2;
    XY = 3;
  }

  enum KickMethod {
    Chip = 0;
    Straight = 1;
  }

  KickType sensor_type = 1;
  KickMethod kick_method = 2;
  int32 kick_strength = 3;
  Position ball_waypoint = 4;
  Position ball_pos = 5;
  Velocity ball_vel = 6;
}

message DwaResult {
  int32 vx = 1;
  int32 vy = 2;
  int32 omega = 3;
  int32 ax = 4;
  int32 ay = 5;
}

enum RobotCommandCoordinateSystemType {
  Vector = 0;
  Coordinate = 1;
  Relax = 2;
}

// StrategyPC -> RasPi
// RasPi -> STM32
message SpcCommand {
  Position current_pos = 1;
  Velocity move_vec = 2;
  Position target_pos = 3;
  repeated Obstacle obstacles = 4;
  Kick kick = 5;
  bool prohibited_zone_ignore = 6;
  RobotCommandCoordinateSystemType robot_command_coordinate_system_type = 7;
  bool vision_data_valid = 8;
}

// DWA Result
// RasPi -> STM32
message RaspiCommand {
  Position target_pos = 1;
  bool dwa_result_valid = 2;
  bool path_enable = 3;
  DwaResult dwa_result = 4;
}

message RobotState {
  Position current_pos = 1;
  Velocity current_vel = 2;
  Acceleration current_accel = 3;
} 

message AIsaacCommand {
  int32 robot_command_coordinate_system_type = 1;
  int32 target_x = 2;
  int32 target_y = 3;
  int32 target_angle = 4;
  bool vision_data_valid = 5;
  int32 current_x = 6;
  int32 current_y = 7;
  int32 current_angle = 8;
  Kick kick = 9;
}
